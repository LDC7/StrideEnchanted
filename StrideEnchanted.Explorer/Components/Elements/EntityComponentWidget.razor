@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using Stride.Core
@using Stride.Engine
@using System.Reflection

<MudExpansionPanel Text="@this.componentName" Expanded="@true">
  @foreach (var field in this.Fields)
  {
    <MudTextField Label="@field.Name"
                  Value="@field.GetValue(this.Component)"
                  ReadOnly="@true"
                  Class="my-1" />
  }
  @foreach (var property in this.Properties)
  {
    <MudTextField Label="@property.Name"
                  Value="@property.GetValue(this.Component)"
                  ReadOnly="@true"
                  Class="my-1" />
  }
</MudExpansionPanel>

@code {
  private bool expanded = true;
  private string componentName = string.Empty;
  private IReadOnlyCollection<FieldInfo> Fields = Array.Empty<FieldInfo>();
  private IReadOnlyCollection<PropertyInfo> Properties = Array.Empty<PropertyInfo>();

  [Parameter]
  [EditorRequired]
  public required EntityComponent Component { get; set; } = default!;

  protected override Task OnInitializedAsync()
  {
    var componentType = this.Component.GetType();
    this.componentName = componentType.Name;
    this.Fields = componentType
      .GetFields(BindingFlags.Public | BindingFlags.Instance)
      .Where(f => f.GetCustomAttribute<DataMemberIgnoreAttribute>() == null)
      .Where(f => f.GetCustomAttribute<DisplayAttribute>()?.Browsable != false)
      .Where(f => !f.FieldType.IsAssignableTo(typeof(IEnumerable<>)))
      .ToArray();
    this.Properties = componentType
      .GetProperties(BindingFlags.Public | BindingFlags.Instance)
      .Where(p => p.CanRead)
      .Where(f => f.GetCustomAttribute<DataMemberIgnoreAttribute>() == null)
      .Where(f => f.GetCustomAttribute<DisplayAttribute>()?.Browsable != false)
      .Where(f => !f.PropertyType.IsAssignableTo(typeof(IEnumerable<>)))
      .ToArray();

    return base.OnInitializedAsync();
  }

  private void HandleHeaderButtonClick(MouseEventArgs args)
  {
    this.expanded = !this.expanded;
  }
}
