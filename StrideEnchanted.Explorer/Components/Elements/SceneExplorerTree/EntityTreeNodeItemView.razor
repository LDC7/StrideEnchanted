@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using StrideEnchanted.Explorer.Interfaces
@using System.ComponentModel

@implements IDisposable

<MudTreeViewItem id="@this.Entity.Id"
                 Value="@this.Entity"
                 Text="@this.Entity.Name"
                 IconColor="@Color.Primary"
                 Icon="@Icons.Material.Filled.Label"
                 Selected="@(this.Selected == (object)this.Entity)"
                 CanExpand="@this.CanExpand"
                 ExpandButtonIcon="@(this.CanExpand ? Icons.Material.Filled.ArrowRight : null)"
                 ExpandedChanged="@this.HandleExpand"
                 OnClick="@this.HandleClick">
  @if (this.needRenderChildComponents)
  {
    @foreach (var childEntity in this.Entity.Children)
    {
      <EntityTreeNodeItemView Entity="@childEntity" Selected="@this.Selected" SelectedChanged="@this.SelectedChanged" />
    }
  }
</MudTreeViewItem>

@code {
  [Parameter]
  [EditorRequired]
  public required ITrackedEntity Entity { get; set; } = default!;

  [Parameter]
  [EditorRequired]
  public object? Selected { get; set; }

  [Parameter]
  public EventCallback<object?> SelectedChanged { get; set; }

  private bool needRenderChildComponents;

  private bool CanExpand => this.Entity.Children.Any();

  protected override Task OnInitializedAsync()
  {
    this.Entity.PropertyChanged += this.OnPropertyChanged;
    return base.OnInitializedAsync();
  }

  private Task HandleClick(MouseEventArgs args)
  {
    return this.SelectedChanged.InvokeAsync(this.Entity);
  }

  private void HandleExpand(bool value)
  {
    if (!this.needRenderChildComponents && value)
      this.needRenderChildComponents = true;
  }

  private void OnPropertyChanged(object? sender, PropertyChangedEventArgs _)
  {
    InvokeAsync(this.StateHasChanged);
  }

  public void Dispose()
  {
    this.Entity.PropertyChanged -= this.OnPropertyChanged;
  }
}
