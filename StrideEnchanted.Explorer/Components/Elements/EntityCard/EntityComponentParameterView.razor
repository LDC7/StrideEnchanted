@using MudBlazor
@using Stride.Core.Mathematics
@using StrideEnchanted.Explorer.Components.Elements.EntityCard.Editors
@using StrideEnchanted.Explorer.Interfaces
@using System.ComponentModel

@switch (this.Type)
{
  case ParameterType.Boolean:
    {
      <BooleanParameterEditorView Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.String:
    {
      <TextParameterEditorView Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Integer:
    {
      <NumberParameterEditorView T="@(int?)" Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Float:
    {
      <NumberParameterEditorView T="@(float?)" Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Double:
    {
      <NumberParameterEditorView T="@(double?)" Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Decimal:
    {
      <NumberParameterEditorView T="@(decimal?)" Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Vector2:
    {
      <Vector2ParameterEditorView Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Vector3:
    {
      <Vector3ParameterEditorView Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Vector4:
    {
      <Vector4ParameterEditorView T="@Vector4" Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Quaternion:
    {
      <Vector4ParameterEditorView T="@Quaternion" Parameter="@this.Parameter" />
      break;
    }
  case ParameterType.Unknown:
  default:
    {
      <UnknownParameterEditorView Parameter="@this.Parameter" />
      break;
    }
}

@code {
  private ParameterType Type { get; set; }

  [Parameter]
  [EditorRequired]
  public required ITrackedEntityComponentParameter Parameter { get; set; } = default!;

  protected override Task OnInitializedAsync()
  {
    this.Type = GetParameterType(this.Parameter);
    return base.OnInitializedAsync();
  }

  private static ParameterType GetParameterType(ITrackedEntityComponentParameter parameter)
  {
    return parameter.ParameterType switch
    {
      Type t when t == typeof(bool) => ParameterType.Boolean,
      Type t when t == typeof(int) => ParameterType.Integer,
      Type t when t == typeof(float) => ParameterType.Float,
      Type t when t == typeof(Vector2) => ParameterType.Vector2,
      Type t when t == typeof(Vector3) => ParameterType.Vector3,
      Type t when t == typeof(Vector4) => ParameterType.Vector4,
      Type t when t == typeof(Quaternion) => ParameterType.Quaternion,
      Type t when t == typeof(double) => ParameterType.Double,
      Type t when t == typeof(decimal) => ParameterType.Decimal,
      Type t when t == typeof(string) => ParameterType.String,
      _ => ParameterType.Unknown
    };
  }

  private enum ParameterType
  {
    Unknown,
    Boolean,
    Integer,
    Float,
    Double,
    Decimal,
    String,
    Vector2,
    Vector3,
    Vector4,
    Quaternion
  }
}
