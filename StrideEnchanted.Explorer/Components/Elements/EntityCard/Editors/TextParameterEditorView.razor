@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using StrideEnchanted.Explorer.Interfaces
@using System.ComponentModel

@implements IDisposable

<MudTextField T="@string"
              @ref="@this.editorRef"
              Label="@this.Parameter.Name"
              Value="@this.internalValue"
              Class="my-1"
              ValueChanged="@this.HandleValueChanged"
              OnKeyDown="@this.HandleKeyDown"
              OnBlur="@this.HandleBlur" />

@code {
  private MudTextField<string?> editorRef = default!;
  private string? internalValue = default;
  private bool isEditing = false;

  [Parameter]
  [EditorRequired]
  public required ITrackedEntityComponentParameter Parameter { get; set; } = default!;

  protected override Task OnInitializedAsync()
  {
    this.internalValue = this.Parameter.Value as string;
    this.Parameter.PropertyChanged += this.OnPropertyChanged;
    return base.OnInitializedAsync();
  }

  private void HandleValueChanged(string? newValue)
  {
    if (this.internalValue != newValue)
    {
      this.isEditing = true;
      this.internalValue = newValue;
    }
  }

  private async Task HandleKeyDown(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
      await this.BlurAsync();
  }

  private Task HandleBlur(FocusEventArgs args)
  {
    this.ApplyInternalValue();
    return Task.CompletedTask;
  }

  private void ApplyInternalValue()
  {
    this.isEditing = false;
    this.Parameter.SetValue(this.internalValue);
  }

  private async Task BlurAsync()
  {
    await this.editorRef.BlurAsync();
  }

  private void OnPropertyChanged(object? sender, PropertyChangedEventArgs _)
  {
    if (!this.isEditing)
    {
      this.internalValue = this.Parameter.Value as string;
      InvokeAsync(this.StateHasChanged);
    }
  }

  public void Dispose()
  {
    this.Parameter.PropertyChanged -= this.OnPropertyChanged;
  }
}
