@using Microsoft.AspNetCore.Components.Web
@using MudBlazor
@using Stride.Core.Mathematics
@using StrideEnchanted.Explorer.Constants
@using StrideEnchanted.Explorer.Interfaces
@using System.ComponentModel
@using System.Runtime.InteropServices

@typeparam T
@implements IDisposable

<MudStack Row="@true">

  <MudNumericField T="@float"
                   @ref="@this.editorXRef"
                   Label="@($"{this.Parameter.Name}.X")"
                   Value="@this.X"
                   Class="my-1"
                   HideSpinButtons="@true"
                   ValueChanged="@this.HandleValueXChanged"
                   OnKeyDown="@this.HandleKeyDown"
                   OnBlur="@this.HandleBlur" />

  <MudNumericField T="@float"
                   @ref="@this.editorYRef"
                   Label="@($"{this.Parameter.Name}.Y")"
                   Value="@this.Y"
                   Class="my-1"
                   HideSpinButtons="@true"
                   ValueChanged="@this.HandleValueYChanged"
                   OnKeyDown="@this.HandleKeyDown"
                   OnBlur="@this.HandleBlur" />

  <MudNumericField T="@float"
                   @ref="@this.editorZRef"
                   Label="@($"{this.Parameter.Name}.Z")"
                   Value="@this.Z"
                   Class="my-1"
                   HideSpinButtons="@true"
                   ValueChanged="@this.HandleValueZChanged"
                   OnKeyDown="@this.HandleKeyDown"
                   OnBlur="@this.HandleBlur" />

  <MudNumericField T="@float"
                   @ref="@this.editorWRef"
                   Label="@($"{this.Parameter.Name}.W")"
                   Value="@this.W"
                   Class="my-1"
                   HideSpinButtons="@true"
                   ValueChanged="@this.HandleValueWChanged"
                   OnKeyDown="@this.HandleKeyDown"
                   OnBlur="@this.HandleBlur" />

  <MudToggleIconButton @bind-Toggled="@this.IsNormalized"
                       Icon="@ExplorerIcons.NormalizedVector"
                       Color="@MudBlazor.Color.Default"
                       ToggledColor="@MudBlazor.Color.Primary" />

</MudStack>

@code {
  private MudNumericField<float> editorXRef = default!;
  private MudNumericField<float> editorYRef = default!;
  private MudNumericField<float> editorZRef = default!;
  private MudNumericField<float> editorWRef = default!;
  private float X = default;
  private float Y = default;
  private float Z = default;
  private float W = default;
  private bool isEditing = false;

  public bool IsNormalized { get; set; }

  [Parameter]
  [EditorRequired]
  public required ITrackedEntityComponentParameter Parameter { get; set; } = default!;

  protected override Task OnInitializedAsync()
  {
    if (this.Parameter.Value is Vector4 vector)
    {
      this.IsNormalized = vector.IsNormalized;
      this.X = vector.X;
      this.Y = vector.Y;
      this.Z = vector.Z;
      this.W = vector.W;
    }
    else if (this.Parameter.Value is Quaternion quaternion)
    {
      this.IsNormalized = quaternion.IsNormalized;
      this.X = quaternion.X;
      this.Y = quaternion.Y;
      this.Z = quaternion.Z;
      this.W = quaternion.W;
    }

    this.Parameter.PropertyChanged += this.OnPropertyChanged;
    return base.OnInitializedAsync();
  }

  private void HandleValueXChanged(float newValue)
  {
    if (this.X != newValue)
    {
      this.isEditing = true;
      this.X = newValue;
    }
  }

  private void HandleValueYChanged(float newValue)
  {
    if (this.Y != newValue)
    {
      this.isEditing = true;
      this.Y = newValue;
    }
  }

  private void HandleValueZChanged(float newValue)
  {
    if (this.Z != newValue)
    {
      this.isEditing = true;
      this.Z = newValue;
    }
  }

  private void HandleValueWChanged(float newValue)
  {
    if (this.W != newValue)
    {
      this.isEditing = true;
      this.W = newValue;
    }
  }

  private async Task HandleKeyDown(KeyboardEventArgs args)
  {
    if (args.Key == "Enter")
      await this.BlurAsync();
  }

  private Task HandleBlur(FocusEventArgs args)
  {
    this.ApplyInternalValue();
    return Task.CompletedTask;
  }

  private void ApplyInternalValue()
  {
    object? value = null;
    if (typeof(T) == typeof(Vector4))
    {
      var vector = new Vector4(this.X, this.Y, this.Z, this.W);
      if (this.IsNormalized)
        vector.Normalize();

      value = vector;
    }
    if (typeof(T) == typeof(Quaternion))
    {
      var quaternion = new Quaternion(this.X, this.Y, this.Z, this.W);
      if (this.IsNormalized)
        quaternion.Normalize();

      value = quaternion;
    }

    if (value != null)
    {
      this.isEditing = false;
      this.Parameter.SetValue(value);
    }
  }

  private async Task BlurAsync()
  {
    await this.editorXRef.BlurAsync();
    await this.editorYRef.BlurAsync();
    await this.editorZRef.BlurAsync();
    await this.editorWRef.BlurAsync();
  }

  private void OnPropertyChanged(object? sender, PropertyChangedEventArgs _)
  {
    if (!this.isEditing)
    {
      if (this.Parameter.Value is Vector4 vector)
      {
        this.X = vector.X;
        this.Y = vector.Y;
        this.Z = vector.Z;
        this.W = vector.W;
      }
      else if (this.Parameter.Value is Quaternion quaternion)
      {
        this.X = quaternion.X;
        this.Y = quaternion.Y;
        this.Z = quaternion.Z;
        this.W = quaternion.W;
      }

      InvokeAsync(this.StateHasChanged);
    }
  }

  public void Dispose()
  {
    this.Parameter.PropertyChanged -= this.OnPropertyChanged;
  }
}
